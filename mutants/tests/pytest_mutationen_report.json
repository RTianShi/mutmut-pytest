{"created": 1758024652.4873948, "duration": 0.0360567569732666, "exitcode": 1, "root": "/home/rts/\u4e0b\u8f7d/Python_src", "environment": {}, "summary": {"failed": 10, "total": 10, "collected": 10}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/test_add_values.py", "type": "Module"}]}, {"nodeid": "tests/test_add_values.py", "outcome": "passed", "result": [{"nodeid": "tests/test_add_values.py::test_add_values[originalInput0]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput1]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput2]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput3]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput4]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput5]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput6]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput7]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput8]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput9]", "type": "Function", "lineno": 100}]}], "tests": [{"nodeid": "tests/test_add_values.py::test_add_values[originalInput0]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput0]", "parametrize", "pytestmark", "originalInput0", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.0003012210363522172, "outcome": "passed"}, "call": {"duration": 0.011761448986362666, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput0]", "lineno": 0, "message": "check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.00014737900346517563, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput1]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput1]", "parametrize", "pytestmark", "originalInput1", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00014675501734018326, "outcome": "passed"}, "call": {"duration": 0.0006863480084575713, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput1]", "lineno": 0, "message": "check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.00010057800682261586, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput2]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput2]", "parametrize", "pytestmark", "originalInput2", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00013077701441943645, "outcome": "passed"}, "call": {"duration": 0.0005522489664144814, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput2]", "lineno": 0, "message": "check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 9.775301441550255e-05, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput3]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput3]", "parametrize", "pytestmark", "originalInput3", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00013089802814647555, "outcome": "passed"}, "call": {"duration": 0.0005537049728445709, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput3]", "lineno": 0, "message": "check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.00011414499022066593, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput4]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput4]", "parametrize", "pytestmark", "originalInput4", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.0001656159874983132, "outcome": "passed"}, "call": {"duration": 0.0005634260014630854, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput4]", "lineno": 0, "message": "check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.00010122294770553708, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput5]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput5]", "parametrize", "pytestmark", "originalInput5", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00012255000183358788, "outcome": "passed"}, "call": {"duration": 0.0005704429931938648, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput5]", "lineno": 0, "message": "check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.00010089599527418613, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput6]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput6]", "parametrize", "pytestmark", "originalInput6", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00012041203444823623, "outcome": "passed"}, "call": {"duration": 0.000548706972040236, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput6]", "lineno": 0, "message": "check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.00010364199988543987, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput7]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput7]", "parametrize", "pytestmark", "originalInput7", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00011953100329264998, "outcome": "passed"}, "call": {"duration": 0.0005703319911845028, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput7]", "lineno": 0, "message": "check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 9.877094998955727e-05, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput8]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput8]", "parametrize", "pytestmark", "originalInput8", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00012404099106788635, "outcome": "passed"}, "call": {"duration": 0.0005331150023266673, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput8]", "lineno": 0, "message": "check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.00010104099055752158, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput9]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput9]", "parametrize", "pytestmark", "originalInput9", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.0001217440003529191, "outcome": "passed"}, "call": {"duration": 0.0005353860324248672, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput9]", "lineno": 0, "message": "check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.00016188202425837517, "outcome": "passed"}}], "warnings": [{"message": "Unknown config option: pytest -vv --tb\n", "category": "PytestConfigWarning", "when": "config", "filename": "/home/rts/anaconda3/envs/mutmut39/lib/python3.9/site-packages/_pytest/config/__init__.py", "lineno": 1474}]}